// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require jquery-ui/autocomplete
//= require jquery-ui/dialog

//= require infini

//= require_tree .


$(document).ready(function() {


    $('#app_search').each(function() {
        var $search = $('#search');

        /* Set active state on label when input has focus */
        var $label = $('label', this);
        $search.focus(function() {
            $label.addClass('active')
        }).blur(function() {
            $label.removeClass('active')
        });

        /* Remove trailing white spaces on form submit */
        $(this).on('submit', function() {
            $search.val($search.val().trim());
            return true;
        });
    });

    var tagSearchPath = '<%= Rails.application.routes.url_helpers.tags_search_path %>';

    function split( val ) {
        return val.split( / \s*/ );
    }
    function extractLast( term ) {
        return split( term ).pop();
    }


    $('#header form input[type="text"], #edit-field')
        // don't navigate away from the field on tab when selecting an item
        .bind( "keydown", function( event ) {
            if ( event.keyCode === $.ui.keyCode.TAB &&
                $( this ).autocomplete( "instance" ).menu.active ) {
                event.preventDefault();
            }
        })
        .autocomplete({
            minLength: 0,
            source: function(request, response) {
                $.getJSON(tagSearchPath, {
                    term: extractLast(request.term)
                }, response);
            },
            focus: function() {
                // prevent value inserted on focus
                return false;
            },
            select: function( event, ui ) {
                var terms = split(this.value);
                // remove the current input
                terms.pop();
                // add the selected item
                terms.push(ui.item.value);
                // add placeholder to get the comma-and-space at the end
                terms.push("");
                this.value = terms.join( " " );
                return false;
            }
        });
});


$(document).ready(function() {
    $('*[data-toggle="display"]').on('click', function() {
       var target = $(this).data('target');
        $('#'+target).toggle()
    });

    $('a[data-toggle="tab"]').on('click', function(event) {
        event.preventDefault();

        // Remove active class on all anchor tags
        $('a', $(this).parent()).each(function() {
            $(this).removeClass('active');
        });

        $(this).addClass('active');
        var target = $(this).attr('href');

        console.log(target);

        var $target = $(target);

        $target.parent().children().each(function() {
            $(this).removeClass('active');
        });

        $target.addClass('active');
    });
});

